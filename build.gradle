buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        flatDir {
            dirs 'localLibs'
        }
        maven { url "https://grobid.s3.eu-west-1.amazonaws.com/repo/" }
    }
    dependencies {
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0'
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath 'com.adarshr:gradle-test-logger-plugin:2.0.0'
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.8'
}

apply plugin: 'java-library'
apply plugin: 'base'
apply plugin: 'com.github.kt3k.coveralls'

group = "org.grobid.software"
version = '0.8.1'

description = """software-mentions"""

import org.apache.tools.ant.taskdefs.condition.Os

sourceCompatibility = 1.11
targetCompatibility = 1.11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def conf = new org.yaml.snakeyaml.Yaml().load(new File("resources/config/config.yml").newInputStream())
def grobidHome = conf.grobidHome.replace("\$", "").replace('{', "").replace("GROBID_HOME:- ", "").replace("}", "")
if (grobidHome.startsWith("../")) {
    grobidHome = "${rootProject.rootDir}/${grobidHome}"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://grobid.s3.eu-west-1.amazonaws.com/repo/" }
    maven {
        url new File(rootProject.rootDir, "lib")
    }
}

ext {
    // treating them separately, these jars will be flattened into grobid-core.jar on installing,
    // to avoid missing dependencies from the projects that include grobid-core (see 'jar' taskin grobid-core)
    localLibs = ['org/dkpro/statistics/dkpro-statistics-agreement/2.2.0-SNAPSHOT/dkpro-statistics-agreement-2.2.0-SNAPSHOT.jar']
}

dependencies {

    // packaging local libs inside output jar
    //implementation fileTree(dir: new File(rootProject.rootDir, 'lib'), include: localLibs)
    
    implementation group: 'net.arnx', name: 'jsonic', version: '1.3.10'
    //compile group: 'org.dkpro.statistics', name: 'dkpro-statistics-agreement', version: '2.2.0-SNAPSHOT'
    implementation "me.tongfei:progressbar:0.9.0"

    //Logging
    implementation 'org.slf4j:slf4j-api:1.7.30'

    //Apache commons
    implementation group: 'commons-pool', name: 'commons-pool', version: '1.6'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.5'

    //Dropwizard
    implementation "io.dropwizard:dropwizard-core:1.3.23"
    implementation "io.dropwizard:dropwizard-assets:1.3.23"
    implementation "com.hubspot.dropwizard:dropwizard-guicier:1.3.5.0"
    implementation "io.dropwizard:dropwizard-testing:1.3.23"
    implementation "io.dropwizard:dropwizard-forms:1.3.23"
    implementation "io.dropwizard:dropwizard-client:1.3.23"
    implementation "io.dropwizard:dropwizard-auth:1.3.23"
    implementation "io.dropwizard.metrics:metrics-core:4.0.0"
    implementation "io.dropwizard.metrics:metrics-servlets:4.0.0"

    implementation group: 'com.google.guava', name: 'guava', version: '28.2-jre'

    //Parsing xml/json
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.1'
    implementation group: 'xom', name: 'xom', version: '1.3.2'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'

    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
    implementation group: 'asm', name: 'asm', version: '3.3.1'

    implementation 'black.ninia:jep:4.0.2'
    implementation 'org.apache.opennlp:opennlp-tools:1.9.1'
    implementation "joda-time:joda-time:2.9.9"
    implementation "org.apache.lucene:lucene-analyzers-common:4.5.1"
    implementation group: 'org.jruby', name: 'jruby-complete', version: '9.2.13.0'
    implementation "org.apache.pdfbox:pdfbox:2.0.18"

    implementation group: 'org.semanticweb.yars', name: 'nxparser-parsers', version: '2.3.3'

    //Grobid
    implementation (group: 'org.grobid', name: 'grobid-core', version: '0.8.1') {
        exclude group: 'org.slf4j', module: "slf4j-log4j12"
    }
    implementation (group: 'org.grobid', name: 'grobid-trainer', version: '0.8.1') {
        exclude group: 'org.slf4j', module: "slf4j-log4j12"
    }

    //Tests
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

configurations.all { 
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
    
    exclude group: 'org.slf4j', module: "slf4j-log4j12"
}

def libraries = ""
if (Os.isFamily(Os.FAMILY_MAC)) {
    if (Os.OS_ARCH.equals("aarch64")) {
        libraries = "${file("../grobid-home/lib/mac_arm-64").absolutePath}"    
    } else {
        libraries = "${file("../grobid-home/lib/mac-64").absolutePath}"
    }
} else if (Os.isFamily(Os.FAMILY_UNIX)) {
    libraries = "${file("../grobid-home/lib/lin-64/jep").absolutePath}:" +
        "${file("../grobid-home/lib/lin-64").absolutePath}:"
} else  {
    throw new RuntimeException("Unsupported platform!")
}

test {
    testLogging.showStandardStreams = true
    exclude '**/**IntegrationTest**'

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs "--add-opens", "java.base/java.util.stream=ALL-UNNAMED", 
        "--add-opens", "java.base/java.io=ALL-UNNAMED"
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply plugin: 'java'
apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

task install(dependsOn: publishToMavenLocal)

task mainJar(type: ShadowJar) {
    zip64 true
    from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }

    exclude("logback.xml")

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.SoftwareMain'
    }
    //from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }

    exclude("logback.xml")

    configurations = [project.configurations.runtimeClasspath]

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    dependsOn mainJar
    enabled true
}

artifacts {
    archives jar
    archives shadowJar
}

task copyModels(type: Copy) {
    from "${rootDir}/resources/models/"
    include "**"
    into "${grobidHome}/models/"
    doLast { 
        ant.gunzip(src: "${rootDir}/resources/models/software/model.wapiti.gz", dest: "${grobidHome}/models/software/")
    }
}

task installModels {
    doLast {
        download {
            src "https://grobid.s3.amazonaws.com/software-BERT-0.3.2.zip"
            dest "${grobidHome}/models/"
            overwrite false
        }
        ant.unzip(src: "${grobidHome}/models/software-BERT-0.3.2.zip", dest: "${grobidHome}/models/")
        download {
            src "https://grobid.s3.amazonaws.com/context_bert-0.3.2.zip"
            dest "${grobidHome}/models/"
            overwrite false
        }
        ant.unzip(src: "${grobidHome}/models/context_bert-0.3.2.zip", dest: "${grobidHome}/models/")
        download {
            src "https://grobid.s3.amazonaws.com/context_bert_used-0.3.2.zip"
            dest "${grobidHome}/models/"
            overwrite false
        }
        ant.unzip(src: "${grobidHome}/models/context_bert_used-0.3.2.zip", dest: "${grobidHome}/models/")
        download {
            src "https://grobid.s3.amazonaws.com/context_bert_creation-0.3.2.zip"
            dest "${grobidHome}/models/"
            overwrite false
        }
        ant.unzip(src: "${grobidHome}/models/context_bert_creation-0.3.2.zip", dest: "${grobidHome}/models/")
        download {
            src "https://grobid.s3.amazonaws.com/context_bert_shared-0.3.2.zip"
            dest "${grobidHome}/models/"
            overwrite false
        }
        ant.unzip(src: "${grobidHome}/models/context_bert_shared-0.3.2.zip", dest: "${grobidHome}/models/")
    }
}

wrapper {
    gradleVersion "7.2"
}

// Custom Tasks

///////////////////////////
// train and eval ML models

// Run like this: ./gradlew train_software 
task(train_software, dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.SoftwareTrainer'
    classpath = sourceSets.main.runtimeClasspath
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xmx3072m', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xmx3072m'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew train_software_type 
task(train_software_type, dependsOn: 'classes', type: JavaExec, group: 'training') {
    mainClass = 'org.grobid.trainer.SoftwareTypeTrainer'
    classpath = sourceSets.main.runtimeClasspath
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xmx3072m', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xmx3072m'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software -PgH=/path/grobid/home
task(eval_software, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software', getArg('gH', '../grobid-home')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_disambiguation -PgH=/path/grobid/home
task(eval_software_disambiguation, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software_disambiguation', getArg('gH', '../grobid-home')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_doc_level -PgH=/path/grobid/home
task(eval_software_doc_level, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software_doc_level', getArg('gH', '../grobid-home')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_disamb_doc_level -PgH=/path/grobid/home
task(eval_software_disamb_doc_level, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'software_disamb_doc_level', getArg('gH', '../grobid-home')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_disambiguation_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_disambiguation_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software_disambiguation', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_doc_level_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_doc_level_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software_doc_level', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_disamb_doc_level_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_software_disamb_doc_level_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'software_disamb_doc_level', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_disambiguation_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_disambiguation_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software_disambiguation', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_doc_level_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_doc_level_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software_doc_level', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew eval_software_disamb_doc_level_nfold -PgH=/path/grobid/home -Pt=10
task(eval_software_disamb_doc_level_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.trainer.SoftwareTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'software_disamb_doc_level', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

////////////////////
// corpus processing

// Run like this: ./gradlew annotated_corpus_generator_csv -Ppdf=/path/input/pdf -Pcsv=path/csv -Poutput=/output/directory
task(annotated_corpus_generator_csv, dependsOn: 'classes', type: JavaExec, group: 'import') {
    mainClass = 'org.grobid.trainer.AnnotatedCorpusGeneratorCSV'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('pdf', ''), getArg('csv', ''), getArg('output', 'resources/dataset/software/corpus/')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew export_corpus_json -Pinput=/path/input/in.tei.xml -Poutput=/path/output/out.json
task(export_corpus_json, dependsOn: 'classes', type: JavaExec, group: 'export') {
    mainClass = 'org.grobid.trainer.ExportCorpusJson'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('input', ''), getArg('output', '')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew clean_tei_corpus_file -Ptei=/path/input/tei 
task(clean_tei_corpus_file, dependsOn: 'classes', type: JavaExec, group: 'import') {
    mainClass = 'org.grobid.core.utilities.XMLUtilities'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('xml', 'resources/dataset/software/corpus/all.tei.xml')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

// Run like this: ./gradlew post_process_corpus_no_mention -Pxml=/path/input/corpus/tei/xml/file -Pcsv=path/csv -Ppdf=path/pdf -Poutput=/output/path/tei/corpus/file
task(post_process_corpus, dependsOn: 'classes', type: JavaExec, group: 'import') {
    mainClass = 'org.grobid.trainer.XMLCorpusPostProcessorNoMention'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('xml', ''), getArg('csv', ''), getArg('pdf', ''), getArg('output', '')
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms2g', '-Xmx8g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms2g', '-Xmx8g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}

////////////////////
// create pre-annotated training data from PDF (under -PIn=/test_software/in/) with the current models, written under -POut=/test_software/out/ 

// Run like this: ./gradlew create_training -Pin=/test_software/in/ -Pout=/test_software/out/
task(create_training, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    mainClass = 'org.grobid.core.main.batch.SoftwareMain'
    classpath = sourceSets.main.runtimeClasspath
    args '-dIn', getArg('in', ''), '-dOut', getArg('out', ''), '-exe', 'createTraining'
    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs '-Xms4g', '-Xmx12g', "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    } else {
        jvmArgs '-Xms4g', '-Xmx12g'
    }
    systemProperty "java.library.path","${System.getProperty('java.library.path')}:" + libraries
}


//////////
// service
apply plugin: 'application'
application {
    mainClassName = 'org.grobid.service.SoftwareApplication'

    run {
        if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
            jvmArgs "--add-opens", "java.base/java.lang=ALL-UNNAMED"
        }
        workingDir = rootProject.rootDir
        def javaLibraryPath = "${System.getProperty('java.library.path')}:" + libraries

        if (System.env.CONDA_PREFIX) {
            def condaEnv = "${System.env.CONDA_PREFIX}/lib"
            def pythonDirectory = file(condaEnv).listFiles({ it.toString().contains("/lib/python") } as FileFilter)?.first()
            def pythonVersion = (pythonDirectory =~ /python([0-9]\.[0-9]+)/)[0][1]

            javaLibraryPath = "${System.getProperty('java.library.path')}:" +
                libraries + ":" +
                "${System.env.CONDA_PREFIX}/lib:" +
                "${System.env.CONDA_PREFIX}/lib/python${pythonVersion}/site-packages/jep"
        }

        systemProperty "java.library.path", javaLibraryPath

        args = ['server', 'resources/config/config.yml']
    }
}
